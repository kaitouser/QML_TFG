import numpy as np
import matplotlib.pyplot as plt

# This first function creates the different example images that will be used during the tutorial. 
# The images have different characteristics according to the algorithm complexity.

def image_generate(arg):
    if(arg == "smallest"):
        return np.random.uniform(low=0, high=255, size=(2,2)).astype(int) # The image is generated in grayscale
    if(arg == "small"):
        # Used by the costly Qubit Lattice representation.
        return np.random.uniform(low=0, high=255, size=(4,4)).astype(int)
    if(arg == "normal"):
        # Used mostly by mixed representation algorithms.
        return np.random.uniform(low=0, high=255, size=(8,8)).astype(int)
    if(arg == "color"):
        # Only used by algorithms that can treat RGB channels, like MCRQI or BRQI.
        return np.random.uniform(low=0, high=255, size=(8,8,3)).astype(int)
    
# This next function aims to compare the output image generated by the quantum circuit with the original input image. 
# It prints the results as an image and as an array, to see how close the generated results are with the real ones. 

def plot_to_compare(output_im, input_im):
    plt.figure(figsize=(15, 5))

    plt.subplot(1, 4, 1)
    plt.imshow(output_im, 'gray')
    plt.title('Measured Image')

    plt.subplot(1, 4, 2)
    plt.imshow(input_im, 'gray')
    plt.title('Real Image')

    diff_img = input_im - output_im
    plt.subplot(1, 4, 3)
    plt.imshow(diff_img, 'gray')
    plt.title('Difference Image')

    plt.subplot(1, 4, 4)
    plt.text(0.5, 0.5, str(diff_img), fontsize=12, ha='center', va='center', color='black')
    plt.axis('off')

    plt.tight_layout()
    plt.show()
    
# This function is used for calculating the Mean-Squared Error between the different shots.
def calculate_mse(counts1, counts2):
    keys = set(counts1.keys()).union(set(counts2.keys()))
    mse = 0.0
    for key in keys:
        p1 = counts1.get(key, 0) / sum(counts1.values())
        p2 = counts2.get(key, 0) / sum(counts2.values())
        mse += (p1 - p2) ** 2
    mse /= len(keys)
    return mse

# This function is used for plotting the mean-squared error graphic.

def plot_mse(shots_list, mse_list):
    plt.figure(figsize=(12, 6))
    plt.plot(shots_list, mse_list, marker='o', linestyle='-', color='b')
    plt.xlabel('Number of Shots', fontsize=14)
    plt.ylabel('Mean Squared Error (MSE)', fontsize=14)
    plt.yscale('log')
    plt.title('Noise', fontsize=16)
    plt.grid(True, which="both", ls="--")
    plt.show()
